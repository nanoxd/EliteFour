#!/usr/bin/env bash

usage() {
    echo "Usage: $(basename $0) <YEAR>"
}

if [[ $# != 1 ]]; then
    usage
    exit 1
fi


YEAR="$1"
SOURCES_DIR="Sources"
TESTS_DIR="Tests/AdventTests"
PREFIX="AOC"
LIB_DIR="$SOURCES_DIR/$PREFIX$YEAR"
FOUNDATION_LIB="AdventFoundation"
UMBRELLA_LIB="Advent"

create_year() {
  cat > "$LIB_DIR/$YEAR.swift" <<EOF
@_exported import $FOUNDATION_LIB
EOF
}

create_day() {
    file_path="$1"
    num="$2"
    
  cat > "$file_path" <<EOF
final class Day$num: Day {
    override func part1() -> String {
        ""
    }

    override func part2() -> String {
        ""
    }
}
EOF
}

create_test_file() {
  cat > "$TESTS_DIR/Test$YEAR.swift" <<EOF
@testable import $PREFIX$YEAR
import XCTest

class Test$YEAR: XCTestCase {
    func testDay1() {
        let d = Day1()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay2() {
        let d = Day2()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay3() {
        let d = Day3()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay4() {
        let d = Day4()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay5() {
        let d = Day5()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay6() {
        let d = Day6()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay7() {
        let d = Day7()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay8() {
        let d = Day8()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay9() {
        let d = Day9()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay10() {
        let d = Day10()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay11() {
        let d = Day11()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay12() {
        let d = Day12()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay13() {
        let d = Day13()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay14() {
        let d = Day14()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay15() {
        let d = Day15()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay16() {
        let d = Day16()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay17() {
        let d = Day17()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay18() {
        let d = Day18()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay19() {
        let d = Day19()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay20() {
        let d = Day20()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay21() {
        let d = Day21()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay22() {
        let d = Day22()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay23() {
        let d = Day23()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay24() {
        let d = Day24()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }

    func testDay25() {
        let d = Day25()
        let (p1, p2) = d.run()

        XCTAssertEqual(p1, "")
        XCTAssertEqual(p2, "")
    }
}
EOF
}

echo "Creating Sources directory"
mkdir "$LIB_DIR"

echo "Creating Year File"
create_year


echo "Scaffolding out Days"
for i in {1..25}; do
    day_dir="$LIB_DIR/Day $i"
    mkdir "$day_dir"
    
    create_day "$day_dir/$YEAR-Day$i.swift" "$i"
    touch "$day_dir/input.txt"
done

echo "Creating Test File"
create_test_file

echo "Reexporting from Main library"
import_directive="@_exported import $PREFIX$YEAR"
umbrella_header="$SOURCES_DIR/$UMBRELLA_LIB/$UMBRELLA_LIB.swift"
grep -qxF "$import_directive" "$umbrella_header"  || echo "$import_directive" >> "$umbrella_header"

echo "ðŸŽ‰ Remember to add the target to Package.swift"
